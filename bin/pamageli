#! /bin/bash

# Initialisation des variables #
arg="$1"
c=""
e=""
pkg=""
l="$LANG"
emergeopts="-q --quiet-build=y "
version="0.9.5"
declare -A t
path=`dirname $0`

echo -ne '\033]0;Pamageli\007'
# Fin de l'initialisation des variables #

# Fonctions #
pamageli() {
	# Chargement des textes
	texts

	# On vérifie si on est root (A désactiver)
	#check_root
	
	# Aller a une fonction si argument
	case "$arg" in
	sync)
		pamageli_sync
		arg=""
		;;
	i)
		pamageli_install
		arg=""
		;;
	r)
		pamageli_remove
		arg=""
		;;
	u)
		pamageli_update
		arg=""
		;;
	c)
		pamageli_configuration
		arg=""
		;;
	a)
		pamageli_advanced_menu
		arg=""
		;;
	*)
		echo "${t[starting]}"
		;;
	esac
		
	
	# Affichage du menu en boucle
	while [[ "$c" != "q" ]]
	do
		clear

		if [[ ! $TEST ]]
		then

		echo "${t[menu]}"
		echo -e "\n"
		echo "sync - ${t[sync]}"
		echo "i    - ${t[i]}"
		echo "r    - ${t[r]}"
		echo "u    - ${t[u]}"
		echo "s    - ${t[s]}"
		echo "p    - ${t[p]}"
		#echo "     - ${t[e]} (Not implemented yet)"
		echo "a    - ${t[a]}"
		echo "c    - ${t[c]}"
		echo "0    - ${t[0]}"
		echo -e "\n"
		echo "q    - ${t[q]}"
		echo -e "\n"
		read -p "${t[do]}" c 

		else # TEST

		exec 3>&1;
		c=$(dialog --colors --title "${t[menu]}" --nocancel --ok-button "OK" --menu "" 0 0 0 \
			"sync" "${t[sync]}" \
			"i" "${t[i]}" \
			"r" "${t[r]}" \
			"u" "${t[u]}" \
			"s" "${t[s]}" \
			"p" "${t[p]}" \
			"e" "${t[e]}" \
			"a" "${t[a]}" \
			"c" "${t[c]}" \
			"0" "${t[0]}" \
			"q" "${t[q]}" \
		  2>&1 1>&3 )
	
		fi #test


		case "$c" in

		sync)
			pamageli_sync
			;;
		i) 
			pamageli_install
			;;
		r)
			pamageli_remove
			;;
		u) 
			pamageli_update
			;;
		s)
			pamageli_search
			;;
		p)
			pamageli_information_packages
			;;
		e)
			pamageli_edit_files
		   	;;
		a)
			pamageli_advanced_menu
		   	;;
		c)
			pamageli_configuration
		   	;;
		0)
			pamageli_about
		   	;;
		q)
			exit 0;
		   	;;
		*)
			echo "${t[err]}"
			sleep 1;
			;;
	
		esac

	done
}

pamageli_sync() {
	check_root sync
	clear
	echo "${t[menusync]}"
	echo -e "\n"
	eix-sync -q
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_install() {
	check_root i
	clear
	echo "${t[menupkgi]}"
	echo -e "\n"
	read -p "${t[pkgi]}" pkg
	while [[ "$pkg" != "" ]]
	do
		echo -e "\n"
		emerge -av $emergeopts $pkg 
		echo -e "\n"
		read -p "${t[pkgi]}" pkg
	done
}

pamageli_remove() {
	check_root r
	clear
	echo "${t[menupkgr]}"
	echo -e "\n"
	read -p "${t[pkgr]}" pkg
	while [[ "$pkg" != "" ]]
	do
		echo -e "\n"
		emerge -aC $emergeopts $pkg
		echo -e "\n"
		read -p "${t[pkgr]}" pkg
	done
}

pamageli_update() {
	check_root u
	clear
	echo "${t[menupkgu]}"
	echo -e "\n"
	read -p "${t[pkgu]}" pkg
	echo -e "\n"

	if [[ -z $pkg ]]
	then
		if [[ -e /usr/bin/cl-update ]]
		then
			echo "${t[pkgudistcl]}"
			cl-update -o
		else
			# ask to sync before ?
			read -p "${t[pkgusync]} (y/N)" wantsync
			if [[ $wantsync =~ ^([yY][eE][sS]|[yY])$ ]]
			then
				eix-sync -q
			else
				echo "${t[pkgudistgentoo]}"
				emerge -avuDN --with-bdeps=y $emergeopts @world
				echo "${t[pkgudistgentooinfo]}"
			fi
		fi
	else
		emerge -u $emergeopts $pkg
	fi

	read -p "${t[retmenu]}" zz
}

pamageli_search() {
	clear
	echo "${t[menupkgs]}"
	echo -e "\n"
	read -p "${t[pkgs]}" pkg
	while [[ "$pkg" != "" ]]
	do
		echo -e "\n"
		eix -c $pkg
		echo -e "\n"
		read -p "${t[pkgs]}" pkg
	done
}

pamageli_information_packages() {
	while [[ "$c" != "q" ]]
	do
		clear
		echo "${t[menupkgp]}"
		echo -e "\n"
		echo "b   - ${t[pb]}"
		echo "u   - ${t[pu]}"
		echo "f   - ${t[pf]}"
		echo -e "\n"
		echo "q   - ${t[aq]}"
		echo -e "\n"
		read -p "${t[do]}" c 

		case "$c" in

		b)
			pamageli_information_packages_belong
			;;
		u)
			pamageli_information_packages_use
			;;
		f)
			pamageli_information_packages_files
			;;
		q)
			c=""
			pamageli
			;;
		*)
			echo ${t[err]]}
			sleep 1
			;;
		esac
	
	done
}

pamageli_information_packages_belong() {
	clear
	echo "${t[menupkgpb]}"
	echo -e "\n"
	read -p "${t[pkgpb]}" file
	while [[ "$file" != "" ]]
	do
		echo -e "\n"
		file=$(which $file)
		if [[ $? -eq 0 ]]
		then
			equery b $file
		else
			echo "${t[pkgpberr]}"
		fi
		echo -e "\n"
		read -p "${t[pkgpb]}" file
	done
}

pamageli_information_packages_use() {
        clear
        echo "${t[menupkgpu]}"
        echo -e "\n"
        read -p "${t[pkgpu]}" pkg
        while [[ "$pkg" != "" ]]
        do
                echo -e "\n"
                equery u $pkg
                echo -e "\n"
                read -p "${t[pkgpu]}" pkg
        done
}

pamageli_information_packages_files() {
        clear
        echo "${t[menupkgpf]}"
        echo -e "\n"
        read -p "${t[pkgpf]}" pkg
        while [[ "$pkg" != "" ]]
        do
                echo -e "\n"
                equery f $pkg
                echo -e "\n"
                read -p "${t[pkgpf]}" pkg
        done
}


pamageli_edit_files() {
	# $EDITOR
	while [[ "$c" != "q" ]]
	do
		clear
		echo "${t[menupkge]}"
		echo -e "\n"
		echo "k   - ${t[ek]}"
		echo "u   - ${t[eu]}"
		echo "m   - ${t[em]}"
		echo -e "\n"
		echo "q   - ${t[eq]}"
		echo -e "\n"
		read -p "${t[do]}" c 

		case "$c" in

		k)
			echo "Not implemented yet !"
			sleep 1
			;;
		u)
			echo "Not implemented yet !"
			sleep 1
			;;
		m)
			echo "Not implemented yet !"
			sleep 1
			;;
		q)
			c=""
			pamageli
			;;
		*)
			echo ${t[err]]}
			sleep 1
			;;
		esac
	
	done
}

pamageli_advanced_menu() {
	check_root a
	ca=""
	while [[ "$ca" != "q" ]]
	do
		clear
		echo "${t[menupkga]}"
		echo -e "\n"
		echo "x   - ${t[ax]}"
		echo "k   - ${t[ak]}"
		echo "o   - ${t[ao]}"
		echo "a   - ${t[aa]}"
		echo "pl  - ${t[apl]}"
		echo "py  - ${t[apy]}"
		echo "rd  - ${t[ard]}"
		echo "rs  - ${t[ars]}"
		echo "rw  - ${t[arw]}"
		echo "rg  - ${t[arg]}"
		echo -e "\n"
		echo "q   - ${t[aq]}"
		echo -e "\n"
		read -p "${t[do]}" ca 

		case "$ca" in

		x)
			pamageli_advanced_x11
			;;
		k)
			pamageli_advanced_kernel
			;;
		o)
			pamageli_advanced_orphans
			;;
		a)
			pamageli_advanced_archives
			;;
		pl)
			pamageli_advanced_perl
			;;
		py)
			pamageli_advanced_python
			;;
		rd)
			pamageli_advanced_revdep
			;;
		rs)
			pamageli_advanced_rebuild_system
			;;
		rw)
			pamageli_advanced_rebuild_world
			;;
		rg)
			revdep-rebuild --library 'libstdc++.so.6' -- --exclude gcc
			read -p "${t[retmenu]}" zz
			;;
		q)
			#do nothing to exit loop
			ca="q"
			;;
		*)
			echo ${t[err]}
			sleep 1
			;;
		esac
	done
}

pamageli_advanced_x11() {
	clear
	echo ${t[menuax]}
	echo -e "\n"
	emerge -q @x11-module-rebuild
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_kernel() {
        clear
        echo ${t[menuak]}
        echo -e "\n"
        emerge -q @module-rebuild
        echo -e "\n"
        read -p "${t[retmenu]}" zz
}

pamageli_advanced_orphans() {
	clear
	echo ${t[menuao]}
	echo -e "\n"
	emerge -ac
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_archives() {
	clear
	echo ${t[menuaa]}
	echo -e "\n"
	echo ${t[aad]}
	eclean-dist -id #i pour demander
	echo -e "\n"
	echo ${t[aap]}
	eclean-pkg -id #i pour demander
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_perl(){
	clear
	echo ${t[menuapl]}
	echo -e "\n"
	perl-cleaner --all
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_python(){
	clear
	echo ${t[menuapy]}
	echo -e "\n"
	python-updater
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_revdep() {
	clear
	echo ${t[menuard]}
	echo -e "\n"
	emerge -q @preserved-rebuild
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_rebuild_system() {
	clear
	echo ${t[menuars]}
	echo -e "\n"
	emerge -eq @system
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_advanced_rebuild_world() {
	clear
	echo ${t[menuarw]}
	echo -e "\n"
	emerge -eq @world
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

pamageli_configuration() {
	check_root c
	clear
	option=""

 	while [[ "$option" != "q" ]]
    do
		clear
		echo "${t[menuc]}"
		if [[ ! -f ../etc/pamageli/pamageli.conf ]]
		then
			cp ../etc/pamageli/pamageli.conf.default ../etc/pamageli/pamageli.conf
		fi

		echo -e "La configuration actuelle :"
		confeditor=$(grep EDITOR ../etc/pamageli/pamageli.conf | cut -d= -f2)
		echo -e "EDITOR : $confeditor"
		confeask=$(grep EASK ../etc/pamageli/pamageli.conf | cut -d= -f2)
		echo -e "EASK : $confeask"
		echo -e "\n"
        
		read -p "To change an option, please set OPTION=value (type q to quit) : " option
		
		if [[ "$option" == "q" ]]
		then
			option="q"
		else
			if [[ $option =~ "EDITOR=" ]]
			then
				value=$(echo $option | sed -e "s/EDITOR=//")
				if [[ -e $(which $value 2>/dev/null ) || $value == "default" ]]
				then
					sed -e "s/EDITOR=$confeditor/EDITOR=$value/" -i ../etc/pamageli/pamageli.conf
					echo "EDITOR $value defined"
				else
					echo "The program $value doesn't exist"
					sleep 1
				fi
			fi

			if [[ $option =~ "EASK=" ]]
			then
				value=$(echo $option | sed -e "s/EASK=//")
				if [[ "$value" == "yes" || $value == "no" ]]
				then
					sed -e "s/EASK=$confeask/EASK=$value/" -i ../etc/pamageli/pamageli.conf
					echo "EASK $value defined"
				else
					echo "The EASK value is 'yes' or 'no'"
					sleep 1
				fi
			fi
		fi
          
    done

}

pamageli_about() {
	clear
	echo "${t[menu0]}"
	echo -e "\n"
	echo -e "${t[0txt]}"
	echo -e "\n"
	read -p "${t[retmenu]}" zz
}

texts() {
	t[noroot]="Pamageli needs to be run as root..."
	
	t[starting]="Starting Pamageli..."
	t[menu]="Welcome to Pamageli !"
	t[sync]="Update repositories (Portage and Layman)"
	t[i]="Install packages"
	t[r]="Remove packages"
	t[u]="Update packages"
	t[s]="Search packages"
	t[p]="Information about installed packages"
	t[e]="Edit packages.X files and global USE"
	t[a]="Advanced functions"
	t[c]="Configure Pamageli options"
	t[0]="About Pamageli"
	t[q]="Quit Pamageli"
	t[do]="What do you want to do ? : "

	t[menusync]="${t[menu]} - ${t[sync]}"
	
	t[menupkgi]="${t[menu]} - ${t[i]}"
	t[pkgi]="Type name(s) of packages to install (blank = return to main menu) : "

	t[menupkgr]="${t[menu]} - ${t[r]}"
	t[pkgr]="Type name(s) of packages to remove (blank = return to main menu) : "

	t[menupkgu]="${t[menu]} - ${t[u]}"
	t[pkgu]="Type a name or names of packages to update, or leave blank to update distribution : "
	t[pkgudistcl]="Calculate Linux detected ! Starting cl-update tool !"
	t[pkgudistgentoo]="Gentoo Linux ! Starting update with emerge"
	t[pkgusync]="Do you want to sync portage tree and overlays before updating ?"
	t[pkgudistgentooinfo]="To rebuild modules (kernel, X, PERL, Python), go to Advanced functions."

	t[menupkgs]="${t[menu]} - ${t[s]}"
	t[pkgs]="Search a package (blank = return to main menu) : "

	t[menupkgp]="${t[menu]} - ${t[p]}"
	t[pb]="What package files belong to"
	t[pu]="Show USE flags, and their description"
	t[pf]="List all files installed by a package"

	t[menupkgpb]="${t[menu]} - ${t[pb]}"
	t[pkgpb]="Type a filename to know the associated package (blank = return to main menu) : "
	t[pkgpkerr]="The file doesn't exist !"

	t[menupkgpu]="${t[menu]} - ${t[pu]}"
	t[pkgpu]="Type a package name to see USE FLAGS and their description (blank = return to main menu) : "

	t[menupkgpf]="${t[menu]} - ${t[pf]}"
	t[pkgpf]="Type a package name to see files installed by this package (blank = return to main menu) : "

	t[menupkge]="${t[menu]} -  ${t[e]}"
	t[ek]="What package files belong to"
	t[eu]="Show USE flags, and their description"
	t[em]="List all files installed by a package"
	t[eq]="Return to main menu."

	t[menupkga]="${t[menu]} -  ${t[a]}"
	t[ax]="Rebuild X11 modules"
	t[ak]="Rebuild kernel modules"
	t[ao]="Clean orphans"
	t[aa]="Clean downloaded archives"
	t[apl]="Rebuild PERL modules"
	t[apy]="Rebuild Python modules"
	t[ard]="Rebuild reverse dependancies broken"
	t[ars]="Rebuild the base of system"
	t[arw]="Rebuild all packages"
	t[arg]="Rebuild packages which uses gcc lib"
	t[aq]="Return to main menu."

	t[menuak]="${t[menu]} -  ${t[ak]}"

	t[menuao]="${t[menu]} -  ${t[ao]}"
	
	t[menuaa]="${t[menu]} -  ${t[aa]}"
	t[aad]="Cleaning distfiles..."
	t[aap]="Cleaning packages archives..."

	t[menuapl]="${t[menu]} -  ${t[apl]}"
	t[menuapy]="${t[menu]} -  ${t[apy]}"
	t[menuard]="${t[menu]} -  ${t[ard]}"
	t[menuars]="${t[menu]} -  ${t[ars]}"
	t[menuarw]="${t[menu]} -  ${t[arw]}"

	t[menuc]="${t[menu]} -  ${t[c]}"

	t[menu0]="${t[menu]} - ${t[0]}"
	t[0txt]=" Pamageli $version \n PAckage MAnager for GEntoo LInux \n Written by Adrien.D."

	t[retmenu]="Press enter to return to the previous menu."
	t[err]="Error ! Unknown choice !"

	# Chargement des traductions
	load_translations
}

load_translations() {
	if [[ $l =~ "FR" ]]
	then
		source $path/../share/pamageli/fr.lang
	fi
}

dialog() {
	DIALOGRC="$path/../share/pamageli/dialogrc" /usr/bin/dialog "$@"
}

check_root() {
	uid=$(id -u)
	arg=$1
	if [[ $uid -ne "0" ]]
	then
		echo "${t[noroot]}"
		su -c "$path/pamageli $arg"
		exit 0;
	fi
}

# Fin Fonctions #

# Execution du script #
	
pamageli
